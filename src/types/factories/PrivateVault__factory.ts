/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PrivateVault, PrivateVaultInterface } from "../PrivateVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "index",
        type: "uint16",
      },
    ],
    name: "getLabelByIndex",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "getLabelByName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "cryptoLabel",
        type: "string",
      },
    ],
    name: "save",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161092738038061092783398101604081905261002f91610087565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556005805461ffff191690556100ba565b80516001600160a01b038116811461008257600080fd5b919050565b6000806040838503121561009a57600080fd5b6100a38361006b565b91506100b16020840161006b565b90509250929050565b61085e806100c96000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630681f4f4146100465780632ebc2fcb1461006f578063962939b814610082575b600080fd5b61005961005436600461055c565b610097565b60405161006691906105b7565b60405180910390f35b61005961007d36600461068d565b61022a565b6100956100903660046106ca565b610337565b005b6001546060906001600160a01b031633146100ed5760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b60448201526064015b60405180910390fd5b60055461ffff8084169116116101455760405162461bcd60e51b815260206004820152601460248201527f4c6162656c73206b657973206f766572666c6f7700000000000000000000000060448201526064016100e4565b61ffff8216600090815260036020908152604080832090516101679201610769565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600490935291208054919250906101a49061072e565b80601f01602080910402602001604051908101604052809291908181526020018280546101d09061072e565b801561021d5780601f106101f25761010080835404028352916020019161021d565b820191906000526020600020905b81548152906001019060200180831161020057829003601f168201915b5050505050915050919050565b6001546060906001600160a01b0316331461027b5760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b60448201526064016100e4565b60008260405160200161028e9190610805565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600290935291205490915060ff1615156001146103145760405162461bcd60e51b815260206004820152600e60248201527f4c6162656c206e6f20657869737400000000000000000000000000000000000060448201526064016100e4565b6001600160a01b038116600090815260046020526040902080546101a49061072e565b6001546001600160a01b031633146103855760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b60448201526064016100e4565b6000816040516020016103989190610805565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600290935291205490915060ff161561041a5760405162461bcd60e51b815260206004820152600f60248201527f4c6162656c20686173206578697374000000000000000000000000000000000060448201526064016100e4565b6001600160a01b03811660009081526004602090815260409091208451610443928601906104c3565b5060055461ffff166000908152600360209081526040909120835161046a928501906104c3565b506005805461ffff1690600061047f83610821565b825461ffff9182166101009390930a9283029190920219909116179055506001600160a01b03166000908152600260205260409020805460ff191660011790555050565b8280546104cf9061072e565b90600052602060002090601f0160209004810192826104f15760008555610537565b82601f1061050a57805160ff1916838001178555610537565b82800160010185558215610537579182015b8281111561053757825182559160200191906001019061051c565b50610543929150610547565b5090565b5b808211156105435760008155600101610548565b60006020828403121561056e57600080fd5b813561ffff8116811461058057600080fd5b9392505050565b60005b838110156105a257818101518382015260200161058a565b838111156105b1576000848401525b50505050565b60208152600082518060208401526105d6816040850160208701610587565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261061157600080fd5b813567ffffffffffffffff8082111561062c5761062c6105ea565b604051601f8301601f19908116603f01168101908282118183101715610654576106546105ea565b8160405283815286602085880101111561066d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561069f57600080fd5b813567ffffffffffffffff8111156106b657600080fd5b6106c284828501610600565b949350505050565b600080604083850312156106dd57600080fd5b823567ffffffffffffffff808211156106f557600080fd5b61070186838701610600565b9350602085013591508082111561071757600080fd5b5061072485828601610600565b9150509250929050565b600181811c9082168061074257607f821691505b6020821081141561076357634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061078557607f831692505b60208084108214156107a557634e487b7160e01b86526022600452602486fd5b8180156107b957600181146107ca576107f7565b60ff198616895284890196506107f7565b60008a81526020902060005b868110156107ef5781548b8201529085019083016107d6565b505084890196505b509498975050505050505050565b60008251610817818460208701610587565b9190910192915050565b600061ffff8083168181141561084757634e487b7160e01b600052601160045260246000fd5b600101939250505056fea164736f6c634300080c000a";

type PrivateVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrivateVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrivateVault__factory extends ContractFactory {
  constructor(...args: PrivateVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _signer: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PrivateVault> {
    return super.deploy(
      _signer,
      _caller,
      overrides || {}
    ) as Promise<PrivateVault>;
  }
  override getDeployTransaction(
    _signer: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_signer, _caller, overrides || {});
  }
  override attach(address: string): PrivateVault {
    return super.attach(address) as PrivateVault;
  }
  override connect(signer: Signer): PrivateVault__factory {
    return super.connect(signer) as PrivateVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrivateVaultInterface {
    return new utils.Interface(_abi) as PrivateVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrivateVault {
    return new Contract(address, _abi, signerOrProvider) as PrivateVault;
  }
}
