/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PrivateVault, PrivateVaultInterface } from "../PrivateVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_caller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "index",
        type: "uint16",
      },
    ],
    name: "getLabelByIndex",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "getLabelByName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "cryptoLabel",
        type: "string",
      },
      {
        internalType: "bool",
        name: "_minted",
        type: "bool",
      },
    ],
    name: "save",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516109c63803806109c683398101604081905261002f9161008e565b600080546001600160a01b039384166001600160a01b0319909116179055600180546005805461ffff191690556001600160a81b031916919092161790556100c1565b80516001600160a01b038116811461008957600080fd5b919050565b600080604083850312156100a157600080fd5b6100aa83610072565b91506100b860208401610072565b90509250929050565b6108f6806100d06000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630681f4f4146100515780632ebc2fcb1461007a5780634f02c4201461008d5780636b538b4b146100b1575b600080fd5b61006461005f3660046105df565b6100c6565b6040516100719190610636565b60405180910390f35b61006461008836600461070c565b610259565b6001546100a190600160a01b900460ff1681565b6040519015158152602001610071565b6100c46100bf366004610749565b610366565b005b6001546060906001600160a01b0316331461011c5760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b60448201526064015b60405180910390fd5b60055461ffff8084169116116101745760405162461bcd60e51b815260206004820152601460248201527f4c6162656c73206b657973206f766572666c6f770000000000000000000000006044820152606401610113565b61ffff8216600090815260036020908152604080832090516101969201610801565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600490935291208054919250906101d3906107c6565b80601f01602080910402602001604051908101604052809291908181526020018280546101ff906107c6565b801561024c5780601f106102215761010080835404028352916020019161024c565b820191906000526020600020905b81548152906001019060200180831161022f57829003601f168201915b5050505050915050919050565b6001546060906001600160a01b031633146102aa5760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b6044820152606401610113565b6000826040516020016102bd919061089d565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600290935291205490915060ff1615156001146103435760405162461bcd60e51b815260206004820152600e60248201527f4c6162656c206e6f2065786973740000000000000000000000000000000000006044820152606401610113565b6001600160a01b038116600090815260046020526040902080546101d3906107c6565b6001546001600160a01b031633146103b45760405162461bcd60e51b815260206004820152601160248201527010d85b1b195c881a5cc81a5b9d985b1a59607a1b6044820152606401610113565b6000826040516020016103c7919061089d565b60408051601f1981840301815291815281516020928301206001600160a01b0381166000908152600290935291205490915060ff16156104495760405162461bcd60e51b815260206004820152600f60248201527f4c6162656c2068617320657869737400000000000000000000000000000000006044820152606401610113565b6001600160a01b0381166000908152600460209081526040909120855161047292870190610546565b5060055461ffff166000908152600360209081526040909120845161049992860190610546565b506005805461ffff169060006104ae836108b9565b825461ffff9182166101009390930a9283029190920219909116179055506001600160a01b0381166000908152600260205260409020805460ff1916600190811790915582151514801561050c5750600154600160a01b900460ff16155b1561054057600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790555b50505050565b828054610552906107c6565b90600052602060002090601f01602090048101928261057457600085556105ba565b82601f1061058d57805160ff19168380011785556105ba565b828001600101855582156105ba579182015b828111156105ba57825182559160200191906001019061059f565b506105c69291506105ca565b5090565b5b808211156105c657600081556001016105cb565b6000602082840312156105f157600080fd5b813561ffff8116811461060357600080fd5b9392505050565b60005b8381101561062557818101518382015260200161060d565b838111156105405750506000910152565b602081526000825180602084015261065581604085016020870161060a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261069057600080fd5b813567ffffffffffffffff808211156106ab576106ab610669565b604051601f8301601f19908116603f011681019082821181831017156106d3576106d3610669565b816040528381528660208588010111156106ec57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561071e57600080fd5b813567ffffffffffffffff81111561073557600080fd5b6107418482850161067f565b949350505050565b60008060006060848603121561075e57600080fd5b833567ffffffffffffffff8082111561077657600080fd5b6107828783880161067f565b9450602086013591508082111561079857600080fd5b506107a58682870161067f565b925050604084013580151581146107bb57600080fd5b809150509250925092565b600181811c908216806107da57607f821691505b602082108114156107fb57634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061081d57607f831692505b602080841082141561083d57634e487b7160e01b86526022600452602486fd5b81801561085157600181146108625761088f565b60ff1986168952848901965061088f565b60008a81526020902060005b868110156108875781548b82015290850190830161086e565b505084890196505b509498975050505050505050565b600082516108af81846020870161060a565b9190910192915050565b600061ffff808316818114156108df57634e487b7160e01b600052601160045260246000fd5b600101939250505056fea164736f6c634300080c000a";

type PrivateVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrivateVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrivateVault__factory extends ContractFactory {
  constructor(...args: PrivateVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _signer: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PrivateVault> {
    return super.deploy(
      _signer,
      _caller,
      overrides || {}
    ) as Promise<PrivateVault>;
  }
  override getDeployTransaction(
    _signer: string,
    _caller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_signer, _caller, overrides || {});
  }
  override attach(address: string): PrivateVault {
    return super.attach(address) as PrivateVault;
  }
  override connect(signer: Signer): PrivateVault__factory {
    return super.connect(signer) as PrivateVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrivateVaultInterface {
    return new utils.Interface(_abi) as PrivateVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrivateVault {
    return new Contract(address, _abi, signerOrProvider) as PrivateVault;
  }
}
