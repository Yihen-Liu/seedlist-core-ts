/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PrivateVault, PrivateVaultInterface } from "../PrivateVault";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_query",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "_save",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103ef3803806103ef83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61035c806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063060b77111461003b5780633646d02114610059575b600080fd5b61004361006e565b60405161005091906101f8565b60405180910390f35b61006c610067366004610263565b610125565b005b6000805473ffffffffffffffffffffffffffffffffffffffff1681526002602052604090208054606091906100a290610314565b80601f01602080910402602001604051908101604052809291908181526020018280546100ce90610314565b801561011b5780601f106100f05761010080835404028352916020019161011b565b820191906000526020600020905b8154815290600101906020018083116100fe57829003601f168201915b5050505050905090565b6000805473ffffffffffffffffffffffffffffffffffffffff168152600260209081526040909120825161015b9284019061015f565b5050565b82805461016b90610314565b90600052602060002090601f01602090048101928261018d57600085556101d3565b82601f106101a657805160ff19168380011785556101d3565b828001600101855582156101d3579182015b828111156101d35782518255916020019190600101906101b8565b506101df9291506101e3565b5090565b5b808211156101df57600081556001016101e4565b600060208083528351808285015260005b8181101561022557858101830151858201604001528201610209565b81811115610237576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561027557600080fd5b813567ffffffffffffffff8082111561028d57600080fd5b818401915084601f8301126102a157600080fd5b8135818111156102b3576102b361024d565b604051601f8201601f19908116603f011681019083821181831017156102db576102db61024d565b816040528281528760208487010111156102f457600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061032857607f821691505b6020821081141561034957634e487b7160e01b600052602260045260246000fd5b5091905056fea164736f6c634300080c000a";

type PrivateVaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PrivateVaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PrivateVault__factory extends ContractFactory {
  constructor(...args: PrivateVaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PrivateVault> {
    return super.deploy(addr, overrides || {}) as Promise<PrivateVault>;
  }
  override getDeployTransaction(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(addr, overrides || {});
  }
  override attach(address: string): PrivateVault {
    return super.attach(address) as PrivateVault;
  }
  override connect(signer: Signer): PrivateVault__factory {
    return super.connect(signer) as PrivateVault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrivateVaultInterface {
    return new utils.Interface(_abi) as PrivateVaultInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PrivateVault {
    return new Contract(address, _abi, signerOrProvider) as PrivateVault;
  }
}
